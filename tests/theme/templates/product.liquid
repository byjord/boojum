{% assign add_to_cart = 'Add to cart' %}
{% assign sold_out = 'Sold Out' %}
{% assign unavailable = 'Unavailable' %}

<div class="product" itemscope itemtype="http://schema.org/Product">
  <div class="width-restrict pad">

    <meta itemprop="url" content="{{ shop.url }}{{ product.url }}" />
    <meta itemprop="image" content="{{ product | img_url: 'grande' }}" />

    <form action="/cart/add" id="add-to-cart-form" method="post" enctype="multipart/form-data">

      <div class="product-info-wrap">

        <!-- PHOTOS -->
        <div class="product-photos">

          {% unless product.images.size == 0 %}
            <div class="product-photos-wrap clearfix">
              {% for image in product.images %}
                <div class="product-photo">
                  <img class="zoomer" src="{{ image | img_url: 'large' }}" alt="{{ image.alt | escape }}" data-zoom-image="{{ image | img_url: '1200x' }}" />
                </div>
              {% endfor %}
            </div>
          {% endunless %}

        </div><!-- .product-photos -->


        <!-- DETAILS -->
        <div class="product-details">

          <h1 itemprop="name">{{ product.title }}</h1>

          <div id="product-price" itemprop="offers" itemscope itemtype="http://schema.org/Offer" class="delta">
            <meta itemprop="priceCurrency" content="{{ shop.currency }}" />
            {% if product.available %}
            <link itemprop="availability" href="http://schema.org/InStock" />
            {% else %}
            <link itemprop="availability" href="http://schema.org/OutOfStock" />
            {% endif %}
            <p>
              {% assign variant = product.selected_or_first_available_variant %}
              {% if product.compare_at_price > product.price %}
              <span class="product-price on-sale" itemprop="price">{{ variant.price | money_without_trailing_zeros }}</span>
              <s class="product-compare-price">{{ variant.compare_at_price | money_without_trailing_zeros }}</s>
              {% else %}
              <span class="product-price" itemprop="price">{{ variant.price | money_without_trailing_zeros }}</span>
              {% endif %}
            </p>
          </div>

          {% assign product_vendor_handle = product.vendor | handle %}
          {% if collections[product_vendor_handle].handle == product_vendor_handle %}
            {% assign vendor_url = collections[product_vendor_handle].url %}
          {% else %}
            {% assign vendor_url = product.vendor | url_for_vendor %}
          {% endif %}
          <h2 itemprop="brand">{{ product.vendor }}</h2>

          {% assign hide_default_title = false %}
          {% if product.variants.size == 1 and product.variants.first.title contains 'Default' %}
            {% assign hide_default_title = true %}
          {% endif %}

          {% unless product.variants.size < 2 %}
            <div id="product-variants" class="{% if hide_default_title %} hidden{% endif %}">
              <select id="product-select" name="id">
              {% for variant in product.variants %}
                <option{% if variant == product.selected_or_first_available_variant %} selected{% endif %} value="{{ variant.id }}">
                {{ variant.title }} - {{ variant.price | money_without_trailing_zeros }}
                </option>
              {% endfor %}
              </select>
            </div>
          {% endunless %}

          {% if product.available %}
            <div id="product-add">
              <a class="button button-primary btn-add btn red">
                {{ add_to_cart | escape }}
              </a>
            </div>
          {% else %}
            <div id="product-add">
              <a class="disabled-btn btn">Sold Out</a>
            </div>
          {% endif %}


          <div id="product-description" class="rte" itemprop="description">
            {{ product.description }}
          </div>

        </div><!-- .product-details -->

      </div>

      <div id="shopify-product-reviews" data-id="{{ product.id }}">{{ product.metafields.spr.reviews }}</div>

    </form>

  </div>
</div>

{% comment %}
  Adding support for product options. See here for details:
  http://docs.shopify.com/support/your-website/themes/can-i-make-my-theme-use-products-with-multiple-options
{% endcomment %}

<script>

var selectCallback = function(variant, selector) {

  if (variant) {

    // Swap image.
    if (variant.featured_image) {
      var newImage = variant.featured_image; // New image object.
      var mainImageDomEl = jQuery('.product-photo-container img')[0]; // DOM element of main image we need to swap.
      Shopify.Image.switchImage(newImage, mainImageDomEl, switchImage); // Define switchImage (the callback) in your theme's JavaScript file.
    }

    // Selected a valid variant that is available.
    if (variant.available) {

      // Enabling add to cart button.
      jQuery('#add').removeClass('disabled').prop('disabled', false).val({{ add_to_cart | json }});

      // If item is backordered yet can still be ordered, we'll show special message.
      if (variant.inventory_management && variant.inventory_quantity <= 0) {
        jQuery('#selected-variant').html({{ product.title | json }}{% unless hide_default_title %} + ' - ' + variant.title{% endunless %});
        jQuery('#backorder').removeClass("hidden");
      } else {
        jQuery('#backorder').addClass("hidden");
      }

    } else {
      // Variant is sold out.
      jQuery('#backorder').addClass('hidden');
      jQuery('#add').val({{ sold_out | json }}).addClass('disabled').prop('disabled', true);
    }

    // Whether the variant is in stock or not, we can update the price and compare at price.
    if ( variant.compare_at_price > variant.price ) {
      jQuery('#product-price').html('<span class="product-price on-sale">'+ Shopify.formatMoney(variant.price, "{{ shop.money_format }}") +'</span>'+'&nbsp;<s class="product-compare-price">'+Shopify.formatMoney(variant.compare_at_price, "{{ shop.money_format }}")+ '</s>');
    } else {
      jQuery('#product-price').html('<span class="product-price">'+ Shopify.formatMoney(variant.price, "{{ shop.money_format }}") + '</span>' );
    }

  } else {
    // variant doesn't exist.
    jQuery('#product-price').empty();
    jQuery('#backorder').addClass('hidden');
    jQuery('#add').val({{ unavailable | json }}).addClass('disabled').prop('disabled', true);
  }

};

jQuery(function($) {

  {% unless product.variants.size < 2 %}
    new Shopify.OptionSelectors('product-select', { product: {{ product | json }}, onVariantSelected: selectCallback, enableHistoryState: true });

    // Add label if only one product option and it isn't 'Title'.
    {% if product.options.size == 1 and product.options.first != 'Title' %}
      $('.selector-wrapper:eq(0)').prepend('<label>{{ product.options.first }}</label>');
    {% endif %}

  {% endunless %}
});

Shopify.Image.preload({{ product.images | json }}, 'grande');
Shopify.Image.preload({{ product.images | json }}, '1024x1024');

</script>
